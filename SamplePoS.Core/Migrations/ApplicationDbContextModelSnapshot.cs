// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SamplePoS.Core.Persistance;

namespace SamplePoS.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099");

            modelBuilder.Entity("SamplePoS.Core.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new { CategoryId = 1, Name = "Juices" },
                        new { CategoryId = 2, Name = "Meals" },
                        new { CategoryId = 3, Name = "Starters" }
                    );
                });

            modelBuilder.Entity("SamplePoS.Core.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new { CustomerId = 1, ContactNumber = "0772135250", Name = "Mr.Raqeeb" },
                        new { CustomerId = 2, ContactNumber = "0772135250", Name = "Prince Hardware" },
                        new { CustomerId = 3, ContactNumber = "0772135250", Name = "Royal GH" },
                        new { CustomerId = 4, ContactNumber = "0772135250", Name = "Trans Asia Cellulor" }
                    );
                });

            modelBuilder.Entity("SamplePoS.Core.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CustomerId");

                    b.Property<decimal>("OrderDiscount");

                    b.Property<decimal>("SubTotal");

                    b.Property<DateTime>("Time");

                    b.Property<decimal>("Total");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SamplePoS.Core.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("LineDiscount");

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal>("SubTotal");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SamplePoS.Core.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BuyingPrice");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("ProductCode");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal>("SellingPrice");

                    b.Property<int?>("VendorId");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VendorId");

                    b.ToTable("Products");

                    b.HasData(
                        new { ProductId = 1, BuyingPrice = 10m, CategoryId = 1, Description = "What do you expect!", Name = "Apple Juice", Quantity = 0m, SellingPrice = 20m },
                        new { ProductId = 2, BuyingPrice = 10m, CategoryId = 1, Description = "What do you expect!", Name = "Strawberry Juice", Quantity = 0m, SellingPrice = 30m },
                        new { ProductId = 3, BuyingPrice = 20m, CategoryId = 1, Description = "What do you expect!", Name = "Pineapple Juice", Quantity = 0m, SellingPrice = 50m },
                        new { ProductId = 4, BuyingPrice = 100m, CategoryId = 2, Description = "What do you expect!", Name = "Vegetable Rice and Curry", Quantity = 0m, SellingPrice = 180m },
                        new { ProductId = 5, BuyingPrice = 125m, CategoryId = 2, Description = "What do you expect!", Name = "Chicken Rice and Curry", Quantity = 0m, SellingPrice = 250m },
                        new { ProductId = 6, BuyingPrice = 140m, CategoryId = 2, Description = "What do you expect!", Name = "Beef Rice and Curry", Quantity = 0m, SellingPrice = 250m },
                        new { ProductId = 7, BuyingPrice = 110m, CategoryId = 2, Description = "What do you expect!", Name = "Fish Rice and Curry", Quantity = 0m, SellingPrice = 210m },
                        new { ProductId = 8, BuyingPrice = 250m, CategoryId = 3, Description = "What do you expect!", Name = "Fried Sea Food Dish", Quantity = 0m, SellingPrice = 660m },
                        new { ProductId = 9, BuyingPrice = 280m, CategoryId = 3, Description = "What do you expect!", Name = "Batter fried Cuttle Fish", Quantity = 0m, SellingPrice = 320m }
                    );
                });

            modelBuilder.Entity("SamplePoS.Core.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.HasKey("VendorId");

                    b.ToTable("Vendors");

                    b.HasData(
                        new { VendorId = 1, ContactNumber = "0772135250", Name = "Kingsburry" },
                        new { VendorId = 2, ContactNumber = "0772135250", Name = "Ranjitha" },
                        new { VendorId = 3, ContactNumber = "0772135250", Name = "Ravi Jewellers" },
                        new { VendorId = 4, ContactNumber = "0772135250", Name = "Globe Glass" }
                    );
                });

            modelBuilder.Entity("SamplePoS.Core.Models.Order", b =>
                {
                    b.HasOne("SamplePoS.Core.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("SamplePoS.Core.Models.OrderItem", b =>
                {
                    b.HasOne("SamplePoS.Core.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SamplePoS.Core.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SamplePoS.Core.Models.Product", b =>
                {
                    b.HasOne("SamplePoS.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SamplePoS.Core.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");
                });
#pragma warning restore 612, 618
        }
    }
}
